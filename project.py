# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dZHqiOEzo2ytjCQWl-bvIQ5-gXStHlf1
"""

import base64
import gradio as gr
import google.generativeai as genai
import numpy as np
import cv2
import random
import time
from PIL import Image, ImageDraw, ImageFont

# Configure Gemini API - replace with your actual API key
api_key = "AIzaSyB5fCVl9XTUQfV8qSqJG04MbG2EOGYsXiU"  # Get your key from: https://aistudio.google.com/app/apikey
genai.configure(api_key=api_key)
model = genai.GenerativeModel('gemini-1.5-flash-latest')

def process_image(image):
    """Process image for Gemini API"""
    # Convert Gradio image (numpy array) to bytes
    _, buffer = cv2.imencode('.jpg', image)
    image_bytes = buffer.tobytes()

    # Convert to base64
    return base64.b64encode(image_bytes).decode('utf-8')

def recognize_asl(image):
    """Recognize ASL letter from image using Gemini"""
    if image is None:
        return "Please capture an image first", None

    try:
        # Prepare image and prompt
        base64_image = process_image(image)
        prompt = """
        Identify the American Sign Language (ASL) letter shown in this image.
        Only respond with the single letter (A, B, C, D, or E) if recognized.
        If unclear, respond 'Unknown'.
        Do not include any other text or explanation.

        Image:
        """

        # Call Gemini API
        response = model.generate_content(
            [prompt, {"mime_type": "image/jpeg", "data": base64_image}],
            stream=False
        )

        # Process response
        result = response.text.strip().upper()
        valid_letters = ['A', 'B', 'C', 'D', 'E']

        # Create result image with annotation
        img_pil = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(img_pil)

        try:
            # Try to load a font (works on most systems)
            font = ImageFont.truetype("arial.ttf", 60)
        except:
            # Fallback to default font
            font = ImageFont.load_default()

        text = f"Result: {result}" if result in valid_letters else "Unknown"
        text_color = (0, 128, 0) if result in valid_letters else (200, 0, 0)

        # Calculate text size and position
        text_bbox = draw.textbbox((0, 0), text, font=font)
        text_width = text_bbox[2] - text_bbox[0]
        text_height = text_bbox[3] - text_bbox[1]
        position = ((img_pil.width - text_width) // 2, 20)

        # Draw background and text
        draw.rectangle([position[0]-10, position[1]-10,
                       position[0]+text_width+10, position[1]+text_height+10],
                      fill=(255, 255, 255, 180))
        draw.text(position, text, fill=text_color, font=font)

        # Convert back to numpy array for Gradio
        result_img = cv2.cvtColor(np.array(img_pil), cv2.COLOR_RGB2BGR)

        return result, result_img

    except Exception as e:
        error_msg = f"API Error: {str(e)}"
        return error_msg, None

def generate_example_image(letter):
    """Generate an example image for ASL letters"""
    img_size = 300
    img = Image.new('RGB', (img_size, img_size), color=(240, 240, 240))
    draw = ImageDraw.Draw(img)

    try:
        font = ImageFont.truetype("arial.ttf", 120)
    except:
        font = ImageFont.load_default()

    # Draw letter in center
    text = letter
    text_bbox = draw.textbbox((0, 0), text, font=font)
    text_width = text_bbox[2] - text_bbox[0]
    text_height = text_bbox[3] - text_bbox[1]
    position = ((img_size - text_width) // 2, (img_size - text_height) // 2)

    draw.text(position, text, fill=(0, 0, 0), font=font)

    # Draw hand outline
    draw.ellipse((50, 50, 250, 250), outline=(150, 150, 150), width=3)

    return np.array(img)

# Create Gradio interface
with gr.Blocks(theme=gr.themes.Soft()) as app:
    gr.Markdown("# üñêÔ∏è ASL Letter Recognition")
    gr.Markdown("Show ASL signs for letters **A, B, C, D, or E** using your webcam or upload an image")

    with gr.Row():
        with gr.Column(scale=1):
            image_input = gr.Image(sources=["webcam", "upload"],
                                  label="Capture ASL Sign",
                                  height=300)
            btn = gr.Button("Recognize Letter", variant="primary")

        with gr.Column(scale=1):
            output_text = gr.Textbox(label="Recognized Letter",
                                   placeholder="Letter will appear here")
            output_image = gr.Image(label="Annotated Result", height=300)

    with gr.Accordion("Tips for better recognition", open=False):
        gr.Markdown("""
        - Make sure your hand is clearly visible against a contrasting background
        - Position your hand in the center of the frame
        - Use these standard ASL signs:
            - **A**: Fist with thumb alongside
            - **B**: Flat hand, fingers together
            - **C**: Curved hand like a 'C' shape
            - **D**: Index finger pointing up, other fingers in fist
            - **E**: Fist with thumb across fingers
                    - Avoid shadows on your hand
        """)

    # Generate example images if local files are missing
    example_images = []
    for letter in ['A', 'B', 'C', 'D', 'E']:
        example_images.append(generate_example_image(letter))

    examples = gr.Examples(
        examples=example_images,
        inputs=image_input,
        outputs=[output_text, output_image],
        label="Example Images",
        examples_per_page=5
    )
btn.click(recognize_asl, inputs=image_input, outputs=[output_text, output_image])
image_input.change(recognize_asl, inputs=image_input, outputs=[output_text, output_image])
app.launch(debug=True)



